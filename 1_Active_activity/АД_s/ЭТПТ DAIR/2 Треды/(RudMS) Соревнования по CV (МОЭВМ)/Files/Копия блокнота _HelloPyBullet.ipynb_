{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"colab":{"provenance":[{"file_id":"https://github.com/bulletphysics/bullet3/blob/656a1e74725933e947e5f64d465b62d6f9af683b/examples/pybullet/notebooks/HelloPyBullet.ipynb","timestamp":1758081735806}]}},"cells":[{"cell_type":"markdown","metadata":{"id":"NTwYntjmAJOg"},"source":["# Hello PyBullet!\n","\n","This notebook shows how to install and create a simple application on PyBullet."]},{"cell_type":"markdown","metadata":{"id":"AAAUJ8y0BjBs"},"source":["## Setup\n","\n","First, let's install the [PyBullet](https://pybullet.org/wordpress/) module.\n"]},{"cell_type":"code","metadata":{"id":"xyDqmV_YitDg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758084422103,"user_tz":-180,"elapsed":304098,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}},"outputId":"6b7e22e3-09e9-4481-fdcc-767198eb1e89"},"source":["# Install the PyBullet module.\n","!pip install -U pybullet"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pybullet\n","  Downloading pybullet-3.2.7.tar.gz (80.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.5/80.5 MB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Building wheels for collected packages: pybullet\n","  Building wheel for pybullet (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pybullet: filename=pybullet-3.2.7-cp312-cp312-linux_x86_64.whl size=99873170 sha256=6f909c96c4362c5797d8342789ca3be73b38c1ef4e30d451e7e9dbb82b108b25\n","  Stored in directory: /root/.cache/pip/wheels/72/95/1d/b336e5ee612ae9a019bfff4dc0bedd100ee6f0570db205fdf8\n","Successfully built pybullet\n","Installing collected packages: pybullet\n","Successfully installed pybullet-3.2.7\n"]}]},{"cell_type":"markdown","metadata":{"id":"INLvCOjvEfSl"},"source":["## Hello PyBullet World!\n","\n","This is based on the\n","[PyBullet Quickstart Guide](https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit?usp=sharing).\n","\n","After importing the PyBullet module, the first thing to do is 'connecting' to the physics simulation.\n","PyBullet is designed around a client-server driven API, with a client sending commands and a physics server returning the status.\n","\n","PyBullet has some built-in physics servers: `DIRECT` and `GUI`.\n","Both `GUI` and `DIRECT` connections will execute the physics simulation and rendering in the same process as PyBullet.\n","\n","In this example, we'll use the `DIRECT` mode to do the calculations independently of rendering."]},{"cell_type":"code","metadata":{"id":"ZgNi0AkOipoQ","outputId":"d0d89bcf-f022-4486-da88-4ec352ae4721","colab":{"base_uri":"https://localhost:8080/","height":679},"executionInfo":{"status":"error","timestamp":1758083393582,"user_tz":-180,"elapsed":18,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}}},"source":["import pybullet as p\n","\n","p.connect(p.DIRECT)"],"execution_count":4,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'pybullet'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-2207872383.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpybullet\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDIRECT\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pybullet'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["import pybullet as p\n","\n","# Подключение к серверу (обычно в начале программы)\n","physicsClient = p.connect(p.DIRECT)  # или p.DIRECT для безвизуального режима\n","\n","# Проверка подключения\n","if p.isConnected():\n","    print(\"Успешно подключено к серверу PyBullet!\")\n","else:\n","    print(\"Не подключено к серверу\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jj4eVAbw7sXo","executionInfo":{"status":"ok","timestamp":1758084429760,"user_tz":-180,"elapsed":49,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}},"outputId":"59b40a15-5be2-469e-b288-4c5e0451e746"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Успешно подключено к серверу PyBullet!\n"]}]},{"cell_type":"markdown","metadata":{"id":"V1nNu07MG7kR"},"source":["We want to access the example\n","[Bullet data](https://github.com/bulletphysics/bullet3/tree/master/data)\n","files.\n","Fortunately, we can specify a new search path in PyBullet and point it to the `py_bullet_data.getDataPath()`."]},{"cell_type":"code","metadata":{"id":"FW-AXeioHrU4","executionInfo":{"status":"ok","timestamp":1758084671775,"user_tz":-180,"elapsed":58,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}}},"source":["import pybullet_data\n","\n","p.setAdditionalSearchPath(pybullet_data.getDataPath())"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6fb-HzCsH6Fs"},"source":["Now, we can load models from the example data in the\n","[Unified Robot Description Format (URDF)](https://wiki.ros.org/urdf) format.\n","\n","Let's load a `plane` to serve as our simulation floor plane,\n","and an [R2D2 droid](https://en.wikipedia.org/wiki/R2-D2).\n","\n","In Bullet Physics, you can use whatever units you want as long as you are consistent.\n","For this example, we'll use the\n","[metric system](https://en.wikipedia.org/wiki/Metric_system)."]},{"cell_type":"code","metadata":{"id":"4UHhYcEgipoX","outputId":"6650013f-577e-4dd7-9d29-791ed05b344d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758084782495,"user_tz":-180,"elapsed":59,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}}},"source":["# First, let's make sure we start with a fresh new simulation.\n","# Otherwise, we can keep adding objects by running this cell over again.\n","p.resetSimulation()\n","\n","# Load our simulation floor plane at the origin (0, 0, 0).\n","p.loadURDF('plane.urdf')\n","\n","# Load an R2D2 droid at the position at 0.5 meters height in the z-axis.\n","r2d2 = p.loadURDF('r2d2.urdf', [0, 0, 0.5])\n","\n","# We can check the number of bodies we have in the simulation.\n","p.getNumBodies()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"5mafnqVkJu67"},"source":["### Joint information\n","\n","Now that we've populated our simulation with those two objects,\n","we can analyze them to see what's inside.\n","\n","The [`getJointInfo()`](https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit?usp=sharing#heading=h.la294ocbo43o)\n","function returns a list of all the information from the selected joint."]},{"cell_type":"code","metadata":{"id":"TkIm1cG-ipof","outputId":"abeec0bc-cf17-4b2e-dc09-db1feafb377e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758084851528,"user_tz":-180,"elapsed":75,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}}},"source":["# First let's define a class for the JointInfo.\n","from dataclasses import dataclass\n","\n","@dataclass\n","class Joint:\n","  index: int\n","  name: str\n","  type: int\n","  gIndex: int\n","  uIndex: int\n","  flags: int\n","  damping: float\n","  friction: float\n","  lowerLimit: float\n","  upperLimit: float\n","  maxForce: float\n","  maxVelocity: float\n","  linkName: str\n","  axis: tuple\n","  parentFramePosition: tuple\n","  parentFrameOrientation: tuple\n","  parentIndex: int\n","\n","  def __post_init__(self):\n","    self.name = str(self.name, 'utf-8')\n","    self.linkName = str(self.linkName, 'utf-8')\n","\n","# Let's analyze the R2D2 droid!\n","print(f\"r2d2 unique ID: {r2d2}\")\n","for i in range(p.getNumJoints(r2d2)):\n","  joint = Joint(*p.getJointInfo(r2d2, i))\n","  print(joint)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["r2d2 unique ID: 1\n","Joint(index=0, name='base_to_right_leg', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='right_leg', axis=(0.0, 0.0, 0.0), parentFramePosition=(0.22, 0.0, 0.25), parentFrameOrientation=(0.0, -0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=-1)\n","Joint(index=1, name='right_base_joint', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='right_base', axis=(0.0, 0.0, 0.0), parentFramePosition=(0.2999999996780742, 0.0, -1.3898038463944216e-05), parentFrameOrientation=(0.0, 0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=0)\n","Joint(index=2, name='right_front_wheel_joint', type=0, gIndex=7, uIndex=6, flags=1, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=100.0, maxVelocity=100.0, linkName='right_front_wheel', axis=(0.0, 0.0, 1.0), parentFramePosition=(0.0, 0.133333333333, -0.085), parentFrameOrientation=(0.0, -0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=1)\n","Joint(index=3, name='right_back_wheel_joint', type=0, gIndex=8, uIndex=7, flags=1, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=100.0, maxVelocity=100.0, linkName='right_back_wheel', axis=(0.0, 0.0, 1.0), parentFramePosition=(0.0, -0.133333333333, -0.085), parentFrameOrientation=(0.0, -0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=1)\n","Joint(index=4, name='base_to_left_leg', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='left_leg', axis=(0.0, 0.0, 0.0), parentFramePosition=(-0.22, 0.0, 0.25), parentFrameOrientation=(0.0, -0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=-1)\n","Joint(index=5, name='left_base_joint', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='left_base', axis=(0.0, 0.0, 0.0), parentFramePosition=(0.2999999996780742, 0.0, -1.3898038463944216e-05), parentFrameOrientation=(0.0, 0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=4)\n","Joint(index=6, name='left_front_wheel_joint', type=0, gIndex=9, uIndex=8, flags=1, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=100.0, maxVelocity=100.0, linkName='left_front_wheel', axis=(0.0, 0.0, 1.0), parentFramePosition=(0.0, 0.133333333333, -0.085), parentFrameOrientation=(0.0, -0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=5)\n","Joint(index=7, name='left_back_wheel_joint', type=0, gIndex=10, uIndex=9, flags=1, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=100.0, maxVelocity=100.0, linkName='left_back_wheel', axis=(0.0, 0.0, 1.0), parentFramePosition=(0.0, -0.133333333333, -0.085), parentFrameOrientation=(0.0, -0.7070904020014416, 0.0, 0.7071231599922604), parentIndex=5)\n","Joint(index=8, name='gripper_extension', type=1, gIndex=11, uIndex=10, flags=1, damping=0.0, friction=0.0, lowerLimit=-0.38, upperLimit=0.0, maxForce=1000.0, maxVelocity=0.5, linkName='gripper_pole', axis=(1.0, 0.0, 0.0), parentFramePosition=(0.0, 0.19, 0.2), parentFrameOrientation=(0.0, 0.0, -0.7070904020014416, 0.7071231599922604), parentIndex=-1)\n","Joint(index=9, name='left_gripper_joint', type=0, gIndex=12, uIndex=11, flags=1, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=0.548, maxForce=1000.0, maxVelocity=0.5, linkName='left_gripper', axis=(0.0, 0.0, 1.0), parentFramePosition=(0.2, 0.02, 0.0), parentFrameOrientation=(0.0, 0.0, 0.0, 1.0), parentIndex=8)\n","Joint(index=10, name='left_tip_joint', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='left_tip', axis=(0.0, 0.0, 0.0), parentFramePosition=(0.0, 0.0, 0.0), parentFrameOrientation=(0.0, 0.0, 0.0, 1.0), parentIndex=9)\n","Joint(index=11, name='right_gripper_joint', type=0, gIndex=13, uIndex=12, flags=1, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=0.548, maxForce=1000.0, maxVelocity=0.5, linkName='right_gripper', axis=(0.0, 0.0, -1.0), parentFramePosition=(0.2, -0.02, 0.0), parentFrameOrientation=(0.0, 0.0, 0.0, 1.0), parentIndex=8)\n","Joint(index=12, name='right_tip_joint', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='right_tip', axis=(0.0, 0.0, 0.0), parentFramePosition=(0.0, 0.0, 0.0), parentFrameOrientation=(0.0, 0.0, 0.0, 1.0), parentIndex=11)\n","Joint(index=13, name='head_swivel', type=0, gIndex=14, uIndex=13, flags=1, damping=0.0, friction=0.0, lowerLimit=-0.38, upperLimit=0.0, maxForce=1000.0, maxVelocity=0.5, linkName='head', axis=(0.0, 0.0, 1.0), parentFramePosition=(0.0, 0.0, 0.3), parentFrameOrientation=(0.0, 0.0, 0.0, 1.0), parentIndex=-1)\n","Joint(index=14, name='tobox', type=4, gIndex=-1, uIndex=-1, flags=0, damping=0.0, friction=0.0, lowerLimit=0.0, upperLimit=-1.0, maxForce=0.0, maxVelocity=0.0, linkName='box', axis=(0.0, 0.0, 0.0), parentFramePosition=(0.0, 0.1214, 0.1214), parentFrameOrientation=(0.0, 0.0, 0.0, 1.0), parentIndex=13)\n"]}]},{"cell_type":"markdown","metadata":{"id":"lTxQQmc_Vrue"},"source":["To start the simulation, first we must set the gravity.\n","We'll use [Earth's gravity](http://www.geophys.ac.cn/infowin/Gravity.asp) for convenience, so we'll set it up to `-9.807` m/s<sup>2</sup>."]},{"cell_type":"code","metadata":{"id":"RMZKELbripoh","outputId":"cb0e6efe-ea2e-4ae0-8f08-0fb5adee43a2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1758085215566,"user_tz":-180,"elapsed":62,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}}},"source":["# Set the gravity to Earth's gravity.\n","p.setGravity(0, 0, -9.807)\n","\n","# Run the simulation for a fixed amount of steps.\n","for i in range(20):\n","    position, orientation = p.getBasePositionAndOrientation(r2d2)\n","    x, y, z = position\n","    roll, pitch, yaw = p.getEulerFromQuaternion(orientation)\n","    print(f\"{i:3}: x={x:0.10f}, y={y:0.10f}, z={z:0.10f}), roll={roll:0.10f}, pitch={pitch:0.10f}, yaw={yaw:0.10f}\")\n","    p.stepSimulation()"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["  0: x=0.0000000000, y=0.0000000000, z=0.5000000000), roll=0.0000000000, pitch=-0.0000000000, yaw=0.0000000000\n","  1: x=-0.0000000000, y=0.0000000000, z=0.4998297396), roll=0.0000000000, pitch=-0.0000000000, yaw=-0.0000000000\n","  2: x=-0.0000000000, y=0.0000000000, z=0.4994892483), roll=0.0000000000, pitch=-0.0000000000, yaw=-0.0000000000\n","  3: x=-0.0000000000, y=0.0000000000, z=0.4989785580), roll=0.0000000000, pitch=-0.0000000000, yaw=-0.0000000000\n","  4: x=0.0000000000, y=0.0000000000, z=0.4982977028), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n","  5: x=0.0000000000, y=0.0000000000, z=0.4974467192), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n","  6: x=0.0000000000, y=0.0000000000, z=0.4964256460), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n","  7: x=0.0000000000, y=0.0000000000, z=0.4952345242), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n","  8: x=0.0000000000, y=0.0000000000, z=0.4938733973), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n","  9: x=0.0000000000, y=0.0000000000, z=0.4923423110), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 10: x=0.0000000000, y=0.0000000000, z=0.4906413131), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 11: x=0.0000000000, y=0.0000000000, z=0.4887704541), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 12: x=0.0000000000, y=0.0000000000, z=0.4867297865), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 13: x=0.0000000000, y=0.0000000000, z=0.4845193652), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 14: x=0.0000000000, y=0.0000000000, z=0.4821392473), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 15: x=0.0000000000, y=0.0000000000, z=0.4795894923), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 16: x=0.0000000000, y=0.0000000000, z=0.4768701618), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 17: x=0.0000000000, y=0.0000000000, z=0.4739813200), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 18: x=0.0000000000, y=0.0000000000, z=0.4709230330), roll=0.0000000000, pitch=0.0000000000, yaw=0.0000000000\n"," 19: x=0.0000001301, y=-0.0000076993, z=0.4709287133), roll=0.0000021077, pitch=0.0000002240, yaw=0.0000001173\n"]}]},{"cell_type":"markdown","metadata":{"id":"y8fiKPz8-aOp"},"source":["### Rendering\n","\n","The [`getCameraImage`](https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit?usp=sharing#heading=h.u1jisfnt6984)\n","API will return a RGB image, a depth buffer and a segmentation mask buffer with body unique ids of visible objects for each pixel"]},{"cell_type":"code","metadata":{"id":"tHb7uAveipon","outputId":"ff617a58-e138-4509-fcc2-3d8555e5c1c8","colab":{"base_uri":"https://localhost:8080/","height":552},"executionInfo":{"status":"ok","timestamp":1758085382334,"user_tz":-180,"elapsed":243,"user":{"displayName":"Михаил Рудь","userId":"07068146075922904630"}}},"source":["import numpy as np\n","from PIL import Image\n","from IPython.display import display\n","\n","width = 320\n","height = 200\n","img_arr = p.getCameraImage(\n","    width,\n","    height,\n","    viewMatrix=p.computeViewMatrixFromYawPitchRoll(\n","        cameraTargetPosition=[0, 0, 0],\n","        distance=4,\n","        yaw=60,\n","        pitch=-10,\n","        roll=0,\n","        upAxisIndex=2,\n","    ),\n","    projectionMatrix=p.computeProjectionMatrixFOV(\n","        fov=60,\n","        aspect=width/height,\n","        nearVal=0.01,\n","        farVal=100,\n","    ),\n","    shadow=True,\n","    lightDirection=[1, 1, 1],\n",")\n","\n","width, height, rgba, depth, mask = img_arr\n","print(f\"rgba shape={rgba.shape}, dtype={rgba.dtype}\")\n","display(Image.fromarray(rgba, 'RGBA'))\n","print(f\"depth shape={depth.shape}, dtype={depth.dtype}, as values from 0.0 (near) to 1.0 (far)\")\n","display(Image.fromarray((depth*255).astype('uint8')))\n","print(f\"mask shape={mask.shape}, dtype={mask.dtype}, as unique values from 0 to N-1 entities, and -1 as None\")\n","display(Image.fromarray(np.interp(mask, (-1, mask.max()), (0, 255)).astype('uint8')))"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["rgba shape=(200, 320, 4), dtype=uint8\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-1559180323.py:30: DeprecationWarning: 'mode' parameter is deprecated and will be removed in Pillow 13 (2026-10-15)\n","  display(Image.fromarray(rgba, 'RGBA'))\n"]},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=RGBA size=320x200>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["depth shape=(200, 320), dtype=float32, as values from 0.0 (near) to 1.0 (far)\n"]},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=L size=320x200>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAUAAAADICAAAAAC8b2d3AAACwUlEQVR4Ae3cwW6CUBRFUWj8/0+ubXFEmLEKuSS7Q5NddXmetgNZ30s/IvAlce2yBIgrCDBAFMC8BQaIApi3wABRAPMWGCAKYN4CA0QBzFtggCiAeQsMEAUwb4EBogDmLTBAFMC8BQaIApi3wABRAPMWGCAKYN4CA0QBzFtggCiAeQsMEAUwb4EBogDmLTBAFMC8BQaIApi3wABRAPMWGCAKYN4CA0QBzFtggCiAeQsMEAUwb4EBogDmLTBAFMC8BQaIApi3wABRAPMWiIAv7K/Ofy+stG4XV1qvvqeTv3824EY3++JUo4/wbLrPZCcDPsFv8rWzdn5T3wInA558V785m3yEb6Y4d3efvxHOtZdWuwO83dPMU9wCcQbPAZw5wLEfIscT/D7ehOP5l3z2fyKHp7ghjtri/kNk5ot8YJxyw98ruX5PeTQPfRzP+RAZChwgvjABBogCmLfAAFEA8xYYIApg3gIDRAHMW2CAKIB5CwwQBTBvgQGiAOYtMEAUwLwFBogCmLfAAFEA8xYYIApg3gIDRAHMW2CAKIB5CwwQBTBvgQGiAOYtMEAUwLwFBogCmLfAAFEA8xYYIApg3gIDRAHMW2CAKIB5CwwQBTB/9RVhE+wIm9/Yaybg07ovb4FoHWCAKIB5CwwQBTBvgQGiAOYtMEAUwLwFBogCmLfAAFEA8xYYIApg3gIDRAHMW2CAKIB5CwwQBTBvgQGiAOYtMEAUwLwFBogCmLfAAFEA8xYYIApg3gIDRAHMW2CAKIB5CwwQBTBvgQGiAOYtMEAUwLwFBogCmLfAAFEA874vjIAd4QBRAPMWGCAKYN4CA0QBzFtggCiAeQsMEAUwb4EBogDmLTBAFMC8BQaIApi3wABRAPMWGCAKYN4CA0QBzFtggCiAeQsMEAUwb4EBogDmLTBAFMC8BQaIApi3QAT8ARu3FIpoXy3QAAAAAElFTkSuQmCC\n","image/jpeg":"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/wAALCADIAUABAREA/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/9oACAEBAAA/APf6KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKSlooooooooooooooooooooooooooooooooooooopKKWiiiiiiiiiiiiiiiiiikooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooopKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKSiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiv/Z\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["mask shape=(200, 320), dtype=int32, as unique values from 0 to N-1 entities, and -1 as None\n"]},{"output_type":"display_data","data":{"text/plain":["<PIL.Image.Image image mode=L size=320x200>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAUAAAADICAAAAAC8b2d3AAADCElEQVR4Ae3aDUsbQRiF0bX4v93+8lajQkPMZPSh2QkcwQ/2nevMHu5iRLfNGwECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIEBgVuBpduFB6/5s29Pr++vHgw5wa9tVz/V+7hPd+5erHvTXLeEj5//4HXmM4d4rAz6C37Yw4Jnfqk/wyoDDJ2eZ4cINXMZoeJBlH42zB/h0C2seVQOH/bo9fBzANQu47Av8yyd40V9Gnm+XdKUVJ9elungO+LIS1sVZXrb9dG2ZU/5+Pc7zMqe58Priwv7FtQMvvdk9zg+RA6FGWwMc6UzMAE4gjZYAHOlMzABOII2WABzpTMwATiCNlgAc6UzMAE4gjZYAHOlMzABOII2WABzpTMwATiCNlgAc6UzMAE4gjZYAHOlMzABOII2WABzpTMwATiCNlpz/UWm08n6z/X5b9Z1WbOA1wGvXu0L4DisCXr2dfUHChwK8KnvgAGDEXxLw9KTuKz6wl9pLAl4e8+PKSfbq9JDBii9jtu2jfJ+f3mT2Q3hub7om4CfXh+Dt2zhuxa/jtv7ezqtaPq3+31n7Zxu/53231csD3k3ihxs9zCP8w/v77zGAkRggwCgQ4xoIMArEuAYCjAIxroEAo0CMayDAKBDjGggwCsS4BgKMAjGugQCjQIxrIMAoEOMaCDAKxLgGAowCMa6BAKNAjGsgwCgQ4xoIMArEuAYCjAIxroEAo0CMayDAKBDjGggwCsS4BgKMAjGugQCjQIxrIMAoEOMaCDAKxLgGAowCMa6BAKNAjGsgwCgQ4xoIMArEuAYCjAIxroEAo0CMayDAKBDjGggwCsS4BgKMAjGugQCjQIxrIMAoEOMaCDAKxLgGAowCMa6BAKNAjGsgwCgQ4xoIMArEuAYCjAIxroEAo0CMayDAKBDjGggwCsS4BgKMAjGugQCjQIxrIMAoEOMaCDAKxLgGAowCMa6BEfAv7nganH6OfOsAAAAASUVORK5CYII=\n","image/jpeg":"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\n"},"metadata":{}}]}]}